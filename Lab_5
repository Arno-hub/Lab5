1.

Création d'un nouveau fichier script --> vim master.sh
Pour indiquer le type de shell utilisé --> A ajouter dès le début du script 
-->  #!/bin/bash
Pour lister les fichiers se trouvant dans le lab4 --> On ajoute le path après la commande ls 
--> ls ~/Desktop/lab4/lab4
Création de la variable master syscom qui stocke la chaîne de caractère
--> master_syscom='Hello Embedded Linux'
affichage de la variable --> echo $master_syscom
Ajouter le droit d'execution du fichier --> chmod u+rx master.sh
Après execution --> bon fonctionnement --> affichage des fichiers présents dans le lab4 et du message stocké dans la variable master_syscom

2. 

Création d'un nouveau fichier script intitulé --> "test.sh" 
--> indication du shell utilisé 
--> definition de la fonction qui testera les deux nombre rentrés en paramètre par l'utilisateur via les variables $1 et $2.
--> Après avoir donné le droit d'éxecution on peut executer le script.
--> Pour executer le script, entrer les arguments--> On tape dans le terminal --> ./test.sh 2 3 
--> On obtient en sortie --> 
--> Le premier argument est 2
--> le deuxième argument est 3
--> le nombre 2 est inférieur au nombre 3

3.

On veut écrire un script shell qui liste tous les dossiers du répertoire de la partie 4.
J'ai implémenté 3 solutions qui réalise ce script shell regroupé dans le script nommé : "Lecture_Doc_Part_4.sh".
On peut s'attacher à décrire la première solution de ce script qui utilise l'indice donné dans la question. 
On se place dans un premier temps dans le répertoire de la partie 4 (lab4) en definissant une variable --> path_to_4
-->path_to_4=~/Desktop/Lab_Info/lab4/lab4/*/
On réalise ensuite une boucle for dans la variable path_to_4 via la variable dir.
On verifie ensuite si le fichier que parcourt la variable dir est un répertoire avec la commande -->if [ -d "$dir" ];
Si c'est le cas, on prélève le nom du fichier uniquement en supprimant le path y menant via les commandes --> dir="${dir%/}" dir="${dir##*/}" 
On affiche ensuite le répertoire --> echo "$dir est un répertoire"

4./5.

On cherche à modifier le script afin de pouvoir préciser en paramètre le chemin du répertoire que l'on souhaite lister
et de renvoyer un message d'erreur si le répertoire passé en paramètre n'existe pas. 
Le script réalisant cette fonction se nomme -->"Lecture_Doc_Repertoire_Au_Choix.sh"
--> On peut décrire la deuxième fonction qui est légèrement différente de la fonction précédente mais qui répond à l'extension du script précédent. 
--> On effectue dans un premier temps un test sur la variable qui prend en paramètre le path jusqu'au répertoire que l'on veut lister. 
On vérifie si le répertoire que l'on veut lister est un répertoire --> if [ -d $1 ]
On se place ensuite dans ce répertoire --> cd $1
On parcours ensuite les fichiers présent dans ce répertoire avec une boucle for --> for doc in `ls` 
On vérifie ensuite si le fichier testé est un répertoire et si c'est le cas on l'affiche -->
	if [ -d $doc ]
		then 
			echo "$doc" 
		fi 
Si jamais le répertoire rentré en paramètre par l'utlisateur n'est pas valide 
--> On affiche --> else 
	echo " Le répertoire $1 n'existe pas , rentrer à nouveau un répertoire valide. "

6.
On désire désormais écrire un script qui permet de télécharder des webcomics, en l'occurence sur le site xkcd.
De plus, on sait que que l'URL de chaque image sur chaque page --> http://xkcd.com/... --> se trouve à chaque fois sur une ligne contenant le mot "hotlinking".
Pour arriver à réaliser cela, j'ai implémenté le script --> "Image_download.sh
Dans ce script, je déclare une boucle for qui va parcourir les 10 pages du site considéré --> for i in 1 2 3 4 5 6 7 8 9 10 .
Je prélève ensuite l'URL de chaque image présente sur chaque page sur la même ligne que "hotlinking" --> image="$(wget -qO- http://xkcd.com/$i | grep -oP 'hotlinking.*')"
Je télécharge ensuite l'image directement après avoir prélevé son URL --> wget $image  
Après avoir réalisé le téléchargement de toutes les images qui sont stockées dans le répertoire du Lab5.
Je me positionne dans ce répertoire --> cd ~/Desktop/Lab_Info/lab5/
je déclare une boucle for qui va parcourir tous les fichiers présents dans mon Lab5--> for FILE in `ls`
Et je vérifie s'il s'agit bien d'une image --> if file "$FILE" |grep -qE 'image|bitmap'
Puis l'affichage de l'image avec la commande --> eog $FILE

